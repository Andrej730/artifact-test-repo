name: macOS XZ Availability Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test-xz-on-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: BEFORE - Check xz availability
      run: |
        echo "üîç === BEFORE INSTALLING DEPENDENCIES ==="
        echo "=== xz availability check ==="
        if command -v xz >/dev/null 2>&1; then
          echo "‚úÖ xz is available in PATH"
          echo "xz version: $(xz --version | head -1)"
          echo "xz location: $(which xz)"
        else
          echo "‚ùå xz is NOT available in PATH"
        fi
        echo ""
        
    - name: BEFORE - Check tar xz support
      run: |
        echo "=== tar xz support check ==="
        if tar --help 2>&1 | grep -q "xz\|lzma"; then
          echo "‚úÖ tar appears to support xz compression"
        else
          echo "‚ùå tar may not support xz compression"
        fi
        echo ""
        
    - name: BEFORE - Test downloading and extracting .tar.xz file
      run: |
        echo "=== Testing tar -xf with .tar.xz file (BEFORE) ==="
        echo "Downloading json.tar.xz..."
        curl -L -o json-before.tar.xz https://github.com/nlohmann/json/releases/download/v3.12.0/json.tar.xz
        
        echo "File downloaded, checking file type:"
        file json-before.tar.xz
        echo ""
        
        echo "Attempting to extract with tar -xf:"
        if tar -xf json-before.tar.xz; then
          echo "‚úÖ tar -xf successfully extracted the .tar.xz file"
          echo "Contents of extracted directory:"
          ls -la | grep json
          if [ -d "json" ]; then
            echo "json directory found - extraction successful"
            # Clean up for next test
            rm -rf json
          fi
        else
          echo "‚ùå tar -xf failed to extract the .tar.xz file"
          exit_code=$?
          echo "Exit code: $exit_code"
        fi
        echo ""
        
    - name: BEFORE - Test manual xz decompression
      run: |
        echo "=== Testing manual xz decompression (BEFORE) ==="
        if command -v xz >/dev/null 2>&1; then
          # Download fresh copy for manual test
          curl -L -o json-manual-before.tar.xz https://github.com/nlohmann/json/releases/download/v3.12.0/json.tar.xz
          
          echo "Attempting manual xz decompression:"
          if xz -d json-manual-before.tar.xz; then
            echo "‚úÖ xz -d successfully decompressed the file"
            echo "Resulting file:"
            ls -la json-manual-before.tar
            
            echo "Attempting to extract with tar:"
            if tar -xf json-manual-before.tar; then
              echo "‚úÖ tar successfully extracted the decompressed file"
              # Clean up
              rm -f json-manual-before.tar
              rm -rf json
            else
              echo "‚ùå tar failed to extract the decompressed file"
            fi
          else
            echo "‚ùå xz -d failed to decompress the file"
          fi
        else
          echo "‚ö†Ô∏è  xz not available for manual decompression test"
        fi
        echo ""
        
    - name: Install dependencies via Homebrew
      run: |
        echo "=== Installing dependencies ==="
        brew update
        brew install git bison autoconf automake libffi findutils
        echo "Installation completed"
        echo ""
        
    - name: AFTER - Check xz availability after brew installs
      run: |
        echo "üîç === AFTER INSTALLING DEPENDENCIES ==="
        echo "=== xz availability check ==="
        if command -v xz >/dev/null 2>&1; then
          echo "‚úÖ xz is available in PATH"
          echo "xz version: $(xz --version | head -1)"
          echo "xz location: $(which xz)"
        else
          echo "‚ùå xz is NOT available in PATH"
        fi
        echo ""
        
    - name: AFTER - Check tar xz support
      run: |
        echo "=== tar xz support check ==="
        if tar --help 2>&1 | grep -q "xz\|lzma"; then
          echo "‚úÖ tar appears to support xz compression"
        else
          echo "‚ùå tar may not support xz compression"
        fi
        echo ""
        
    - name: AFTER - Test downloading and extracting .tar.xz file
      run: |
        echo "=== Testing tar -xf with .tar.xz file (AFTER) ==="
        echo "Downloading json.tar.xz..."
        curl -L -o json-after.tar.xz https://github.com/nlohmann/json/releases/download/v3.12.0/json.tar.xz
        
        echo "File downloaded, checking file type:"
        file json-after.tar.xz
        echo ""
        
        echo "Attempting to extract with tar -xf:"
        if tar -xf json-after.tar.xz; then
          echo "‚úÖ tar -xf successfully extracted the .tar.xz file"
          echo "Contents of extracted directory:"
          ls -la | grep json
          if [ -d "json" ]; then
            echo "json directory found - extraction successful"
            echo "Sample json directory contents:"
            ls -la json/ | head -5
          fi
        else
          echo "‚ùå tar -xf failed to extract the .tar.xz file"
          exit_code=$?
          echo "Exit code: $exit_code"
        fi
        echo ""
        
    - name: AFTER - Test manual xz decompression
      run: |
        echo "=== Testing manual xz decompression (AFTER) ==="
        if command -v xz >/dev/null 2>&1; then
          # Download fresh copy for manual test
          curl -L -o json-manual-after.tar.xz https://github.com/nlohmann/json/releases/download/v3.12.0/json.tar.xz
          
          echo "Attempting manual xz decompression:"
          if xz -d json-manual-after.tar.xz; then
            echo "‚úÖ xz -d successfully decompressed the file"
            echo "Resulting file:"
            ls -la json-manual-after.tar
            
            echo "Attempting to extract with tar:"
            if tar -xf json-manual-after.tar; then
              echo "‚úÖ tar successfully extracted the decompressed file"
            else
              echo "‚ùå tar failed to extract the decompressed file"
            fi
          else
            echo "‚ùå xz -d failed to decompress the file"
          fi
        else
          echo "‚ö†Ô∏è  xz not available for manual decompression test"
        fi
        echo ""
        
    - name: Download and test tar -xf with .tar.xz file
      run: |
        echo "=== Testing tar -xf with .tar.xz file ==="
        echo "Downloading json.tar.xz..."
        curl -L -o json.tar.xz https://github.com/nlohmann/json/releases/download/v3.12.0/json.tar.xz
        
        echo "File downloaded, checking file type:"
        file json.tar.xz
        echo ""
        
        echo "Attempting to extract with tar -xf:"
        if tar -xf json.tar.xz; then
          echo "‚úÖ tar -xf successfully extracted the .tar.xz file"
          echo "Contents of extracted directory:"
          ls -la
          if [ -d "json" ]; then
            echo "json directory contents:"
            ls -la json/ | head -10
          fi
        else
          echo "‚ùå tar -xf failed to extract the .tar.xz file"
          exit_code=$?
          echo "Exit code: $exit_code"
        fi
        echo ""
        
    - name: Test manual xz decompression if available
      run: |
        echo "=== Testing manual xz decompression ==="
        if command -v xz >/dev/null 2>&1; then
          # Download fresh copy for manual test
          curl -L -o json-manual.tar.xz https://github.com/nlohmann/json/releases/download/v3.12.0/json.tar.xz
          
          echo "Attempting manual xz decompression:"
          if xz -d json-manual.tar.xz; then
            echo "‚úÖ xz -d successfully decompressed the file"
            echo "Resulting file:"
            ls -la json-manual.tar
            
            echo "Attempting to extract with tar:"
            if tar -xf json-manual.tar; then
              echo "‚úÖ tar successfully extracted the decompressed file"
            else
              echo "‚ùå tar failed to extract the decompressed file"
            fi
          else
            echo "‚ùå xz -d failed to decompress the file"
          fi
        else
          echo "‚ö†Ô∏è  xz not available for manual decompression test"
        fi
        echo ""
        
    - name: Check what packages provide xz
      run: |
        echo "=== Checking what packages might provide xz ==="
        echo "Searching for xz-related packages:"
        brew search xz || true
        echo ""
        
        echo "Checking if xz is available via different package:"
        if brew list --formula | grep -i xz; then
          echo "Found xz-related packages installed"
        else
          echo "No xz-related packages found in installed formulas"
        fi
        
    - name: Final summary
      run: |
        echo "üìä === FINAL COMPARISON SUMMARY ==="
        echo ""
        echo "üîç BEFORE installing dependencies:"
        echo "  - xz availability: $(ls json-before.tar.xz >/dev/null 2>&1 && echo 'TESTED' || echo 'NOT TESTED')"
        echo "  - tar extraction: $(ls json-manual-before.tar >/dev/null 2>&1 && echo 'WORKED' || echo 'UNKNOWN')"
        echo ""
        echo "üîç AFTER installing dependencies:"
        echo "  - xz command: $(command -v xz >/dev/null 2>&1 && echo 'YES' || echo 'NO')"
        echo "  - tar extraction: $(test -d json 2>/dev/null && echo 'SUCCESS' || echo 'FAILED')"
        echo ""
        echo "üñ•Ô∏è  Environment info:"
        echo "  - macOS version: $(sw_vers -productVersion)"
        echo "  - Homebrew version: $(brew --version | head -1)"
        echo ""
        echo "üìã Dependencies installed:"
        echo "  - git (upgraded)"
        echo "  - bison (keg-only)"
        echo "  - autoconf + m4"
        echo "  - automake" 
        echo "  - libffi (keg-only)"
        echo "  - findutils (with g prefix)"
        echo ""
        echo "üéØ CONCLUSION: This test will show if the dependencies affected xz availability"